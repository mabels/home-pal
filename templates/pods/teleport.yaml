apiVersion: v1
kind: ConfigMap
metadata:
  name: teleport-%CLUSTERNAME%

data:
  adviser.com-cluster.yaml: |
    kind: trusted_cluster
    version: v1
    metadata:
      name: "adviser.com"
    spec:
      enabled: true
      role_map:
        - remote: "*"
          local: [admin]
      token: "%CLUSTERTOKEN%"
      tunnel_addr: teleport.adviser.com:3024
      web_proxy_addr: teleport.adviser.com:443

  teleport.yaml: |
    # By default, this file should be stored in /etc/teleport.yaml
    
    ## IMPORTANT ##
    #When editing YAML configuration, please pay attention to how your editor handles white space. YAML requires consistent handling of tab characters
    # This section of the configuration file applies to all teleport
    # services.
    teleport:
        # nodename allows to assign an alternative name this node can be reached by.
        # by default it's equal to hostname
        nodename: teleport-%CLUSTERNAME%
    
        # Data directory where Teleport keeps its data, like keys/users for
        # authentication (if using the default BoltDB back-end)
        data_dir: /var/lib/teleport
    
        # one-time invitation token used to join a cluster. it is not used on
        / subsequent starts
        #auth_token: 924d9b338db97ba4cbf6ea7318affd97
    
        # when running in multi-homed or NATed environments Teleport nodes need
        # to know which IP it will be reachable at by other nodes
        # advertise_ip: 192.168.202.4
    
        # list of auth servers in a cluster. you will have more than one auth server
        # if you configure teleport auth to run in HA configuration
        #auth_servers:
        #    - 127.0.0.1:3025
    
        # Teleport throttles all connections to avoid abuse. These settings allow
        # you to adjust the default limits
        connection_limits:
            max_connections: 1000
            max_users: 250
    
        # Logging configuration. Possible output values are 'stdout', 'stderr' and
        # 'syslog'. Possible severity values are INFO, WARN and ERROR (default).
        log:
            output: stderr
            severity: INFO
    
        # Type of storage used for keys. You need to configure this to use etcd
        # backend if you want to run Teleport in HA configuration.
        storage:
            type: dir
    
    # This section configures the 'auth service':
    auth_service:
        enabled: yes
        # IP and the port to bind to. Other Teleport nodes will be connecting to
        # this port (AKA "Auth API" or "Cluster API") to validate client
        # certificates
        listen_addr: 0.0.0.0:3025
    
        cluster_name: "teleport-%CLUSTERNAME%"
    
        # Pre-defined tokens for adding new nodes to a cluster. Each token specifies
        # the role a new node will be allowed to assume. The more secure way to
        # add nodes is to use `ttl node add --ttl` command to generate auto-expiring
        # tokens.
        #
        # We recommend to use tools like `pwgen` to generate sufficiently random
        # tokens of 32+ byte length.
        #tokens:
        #    - "proxy,node:xxxxx"
        #    - "auth:yyyy"
    
    # This section configures the 'node service':
    ssh_service:
        enabled: yes
    #    # IP and the port for SSH service to bind to.
        listen_addr: 0.0.0.0:3022
    #    # See explanation of labels in "Labeling Nodes" section below
    #    labels:
    #        role: master
    #        type: postgres
    #    # List (YAML array) of commands to periodically execute and use
    #    # their output as labels.
    #    # See explanation of how this works in "Labeling Nodes" section below
    #    commands:
    #    - name: hostname
    #      command: [/usr/bin/hostname]
    #      period: 1m0s
    #    - name: arch
    #      command: [/usr/bin/uname, -p]
    #      period: 1h0m0s
    #
    # This section configures the 'proxy servie'
    proxy_service:
        enabled: yes
    #    # SSH forwarding/proxy address. Command line (CLI) clients always begin their
    #    # SSH sessions by connecting to this port
        listen_addr: 0.0.0.0:3023
    
    #    kubernetes:
    #	enable yes
    #        listen_addr: 0.0.0.0:3026
    
    #    kubernetes:
    #        kubeconfig_file: /root/.kube/config
    #
    #    # Reverse tunnel listening address. An auth server (CA) can establish an
    #    # outbound (from behind the firewall) connection to this address.
    #    # This will allow users of the outside CA to connect to behind-the-firewall
    #    # nodes.
        tunnel_listen_addr: 0.0.0.0:3024
    #
    #    # List (array) of other clusters this CA trusts.
    #    trusted_clusters:
    #      tunnel_addr: teleport.adviser.com:3024
    #      - key_file: /var/lib/teleport/adviser-cluster.ca
    #        # Comma-separated list of OS logins allowed to users of this
    #        # trusted cluster
    #        allow_logins: john,root
    #        # Establishes a reverse SSH tunnel from this cluster to the trusted
    #        # cluster, allowing the trusted cluster users to access nodes of this
    #        # cluster
    #
    #    # The HTTPS listen address to servethe Web UI and also to authenticate the
    #    # command line (CLI) users via passord+HOTP
        web_listen_addr: 0.0.0.0:3080
    
    #    https_key_file: /var/lib/teleport/webproxy_key.pem
    #    https_cert_file: /var/lib/teleport/webproxy_cert.pem
---
apiVersion: v1
kind: Pod
metadata:
  name: teleport-%CLUSTERNAME%
  labels:
    run: teleport-%CLUSTERNAME%
spec:
  containers:
  - image: quay.io/fastandfearless/teleport-multiarch:arm-alpine-4.1.6
    name: teleport-container
    command:
      - teleport
      - start
    ports:
    - containerPort: 3025
      protocol: TCP
    - containerPort: 3022
      protocol: TCP
    - containerPort: 3023
      protocol: TCP
    - containerPort: 3024
      protocol: TCP
    - containerPort: 3080
      protocol: TCP
    volumeMounts:
    - mountPath: /var/lib/teleport
      name: teleport-lib
    #- mountPath: /root/.kube/config
    #  name: teleport-kube-conf
    - mountPath: /etc/teleport
      name: teleport-yaml
  volumes:
  - name: teleport-yaml
    configMap:
      name: teleport-%CLUSTERNAME%
  - name: teleport-lib
    hostPath:
      path: %BASEDIR%/teleport/lib
      type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: teleport-%CLUSTERNAME%
spec:
  type: NodePort
  ports:
  - port: 3025
    name: 3025tcp
    targetPort: 3025
    protocol: TCP
    nodePort: 3025
#  - port: 3022
#    name: 3022tcp
#    targetPort: 3022
#    protocol: TCP
#    nodePort: 3022
  - port: 3023
    name: 3023tcp
    targetPort: 3023
    protocol: TCP
    nodePort: 3023
  - port: 3024
    name: 3024tcp
    targetPort: 3024
    protocol: TCP
    nodePort: 3024
  - port: 3080
    name: 3080tcp
    targetPort: 3080
    protocol: TCP
    nodePort: 3080
  selector:
    run: teleport-%CLUSTERNAME%
